1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
     
     
     	Користувачами розробленої системи є 2 типи акторів: клієнт та адміністратор. 
     Основними потребами клієнта є: можливість перегляду доступних автомобілів, які можуть здійснити поїздку за вказаними початковою та кінцевою адресою: можливість замовлення поїздки на обраному автомобілі; можливість перегляду інформації про власні поїздки; можливість отримання додаткових послуг під час поїздки; можливість безпечно дістатися до місця призначення. 
     Основними потребами адміністратора є: можливість перегляду та керування користувачами системи; можливість створення, редагування, видалення автономних автомобілів в системі; можливість налаштування автономних автомобілів в системі; можливість створення, редагування, видалення додаткових послуг для поїздок; можливість створення резервних копій даних системи та їхній імпорт в систему.
     Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. додат. А.1).
     Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.


2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


     Для проєктування бази даних було розроблено ER-модель даних (див. додат. Б.1). Вона складається з 7 таблиць: користувачі,  ролі, поїздки, адреси, автомобілі, послуги, послуги у поїздці.
     У базі даних наявні наступні зв’язки між сутностями:
* ролі і користувачі мають зв’язок один до багатьох, бо одна роль може бути у декількох користувачів;
* користувачі і поїздки мають зв’язок один до багатьох, бо один користувач може замовляти безліч поїздок;
* адреси і поїздки мають зв’язок один до багатьох, бо на одну адресу може бути створено декілька поїздок;
* автомобілі і поїздки мають зв’язок один до багатьох, бо один автомобіль може обслуговувати безліч поїздок;
* поїздки і послуги мають зв’язок багато до багатьох, тому було створену проміжну таблицю для послуг у поїздці, бо поїздка може включати декілька послуг, і одна послуга бути включеною у декількох поїздках;


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
     
     
     Для написання серверної частини системи було обрано мову програмування C# з використанням технології ASP.NET Core Web API, яка забезпечує швидку розробку, високу продуктивність та надійність.
     У якості бази даних використано PostgreSQL, до якої з серверного застосунка здійснюється доступ за допомогою технології Entity Framework Core, що надає зручний інтерфейс для взаємодії з базами даних у вигляді об’єктів сутностей.
	Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 1).

     Для демонстрації та тестування API використовується OpenApi (Swagger), що дозволяє зручно тестувати та документувати API, покращуючи якість та зручність розробки. Для забезпечення безпеки даних та конфіденційності використовується захищений протокол HTTPS, що захищає дані під час їхньої передачі.
     Для автоматизації процесу мапування між об’єктами використано бібліотеку AutoMapper. Це дозволяє зменшити кількість одноманітного коду при роботі з об'єктами даних та спрощує розробку серверної частини.
     Для реалізації автентифікації та авторизації використано бібліотеку .NET Identity, що дозволяє що забезпечує гнучкий та потужний механізм для управління користувачами та їхнім доступом до різних частин системи.
     Для маршрутизації запитів використанні API контролери, що є вбудованими засобами розробки на ASP .NET Core. Вони дозволяють розділити програму на логічні компоненти, кожен з яких відповідає за обробку конкретного виду запитів або дій користувача. Це спрощує керування кодом та його розширення.
     Розроблений серверний застосунок побудований за принципами Clean Architecture та складається з декількох шарів: Presentation рівень, Application рівень, Domain рівень та Infrastructure рівень. Кожний вищий шар залежить від нижчого.
      У якості способу організації коду було обрано CQRS (Command Query Responsibility Segregation), який розділяє команди, які змінюють стан системи, від запитів, які повертають дані про стан системи. Цей спосіб організації коду сприяє чіткому структуруванню коду та забезпечує легку розширюваність функціональності системи. Також для організації архітектури застосунка було використано шаблон Mediator. Він дозволяє об'єктам взаємодіяти один з одним, не знаючи безпосередньо один про одного, що сприяє зменшенню залежностей між компонентами системи, тим самим збільшуючи стійкість та масштабованість системи.
     Архітектура серверного застосунка представлена на діаграмі пакетів (див. додат. В.1).
     Приклади частин коду серверного застосунка представлено у додатку Г.


4 СПЕЦИФІКАЦІЯ REST
     
     
     REST API в розробленому проєкті складається з 21 кінцевої точки. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес логіки.
     Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.
     
ВИСНОВКИ
 
     
     У ході виконання лабораторної роботи були отримані навички з проєктування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проєктуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду мови програмування C#.

